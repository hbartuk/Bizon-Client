package com.retrivedmods.wclient.game.module.misc

import android.util.Log
import com.retrivedmods.wclient.game.InterceptablePacket
import com.retrivedmods.wclient.game.Module
import com.retrivedmods.wclient.game.ModuleCategory
import com.retrivedmods.wclient.application.AppContext
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import org.cloudburstmc.math.vector.Vector3f
import org.cloudburstmc.protocol.bedrock.data.DisconnectFailReason
import org.cloudburstmc.protocol.bedrock.packet.*
import kotlin.random.Random

class AntiKickModule : Module(
    name = "üõ°Ô∏è –ê–Ω—Ç–∏-–ö–∏–∫", // –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å —ç–º–æ–¥–∑–∏
    category = ModuleCategory.Misc
) {

    // –û–ø—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    private var disconnectPacketValue by boolValue("üîå –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", true)
    private var transferPacketValue by boolValue("üì° –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å", true)
    private var playStatusPacketValue by boolValue("üìä –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", true)
    private var networkSettingsPacketValue by boolValue("‚öôÔ∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏", true)


    private var showKickMessages by boolValue("üí¨ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∏–∫–∞—Ö", true)
    private var intelligentBypass by boolValue("üß† –£–º–Ω—ã–π –æ–±—Ö–æ–¥", true)
    private var autoReconnect by boolValue("üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", false)
    private var antiAfkSimulation by boolValue("üò¥ –ê–Ω—Ç–∏-–ê–§–ö —Å–∏–º—É–ª—è—Ü–∏—è", true)
    private var useRandomMovement by boolValue("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", true)
    private var preventTimeout by boolValue("‚è∞ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å —Ç–∞–π–º–∞—É—Ç", true)

    private var movementInterval by intValue("‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–≤–∏–∂–µ–Ω–∏—è (–º—Å)", 8000, 500..15000)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    private var isPerformingAntiAFK = false
    private var lastMovementTime = 0L
    private var reconnectAttempts = 0
    private var lastHeartbeatTime = 0L
    private val maxReconnectAttempts = 3
    private val reconnectDelay = 5000
    private val heartbeatInterval = 30000L
    private var movementDuration by intValue("‚è≤Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è (–º—Å)", 200, 50..1000)lue("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è (–º—Å)", 500, 100..3000)


    private var reconnectDelay by intValue("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º—Å)", 3000, 1000..10000)
    private var maxReconnectAttempts by intValue("–ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", 3, 1..10)


    private var lastMovementTime = 0L
    private var isPerformingAntiAFK = false
    private var reconnectAttempts = 0
    private var lastDisconnectReason: String? = null
    private var lastHeartbeatTime = 0L
    private val heartbeatInterval = 30000L

    override fun onEnabled() {
        super.onEnabled()
        if (session != null) {
            lastMovementTime = System.currentTimeMillis()
            reconnectAttempts = 0
            lastHeartbeatTime = System.currentTimeMillis()

            if (preventTimeout) {
                startHeartbeatTask()
            }
        }
    }

    override fun onDisabled() {
        super.onDisabled()
        isPerformingAntiAFK = false
    }

    @OptIn(DelicateCoroutinesApi::class)
    private fun startHeartbeatTask() {
        GlobalScope.launch {
            while (isEnabled && session != null) {
                val currentTime = System.currentTimeMillis()
                if (currentTime - lastHeartbeatTime >= heartbeatInterval) {
                    try {
                        val textPacket = TextPacket().apply {
                            type = TextPacket.Type.TIP
                            isNeedsTranslation = false
                            message = ""
                            xuid = ""
                            platformChatId = ""
                        }
                        session?.clientBound(textPacket)
                        lastHeartbeatTime = currentTime
                    } catch (e: Exception) {
                        Log.w("AntiKick", "Failed to send heartbeat packet", e)
                    }
                }
                delay(5000)
            }
        }
    }

    override fun beforePacketBound(interceptablePacket: InterceptablePacket) {
        if (!isEnabled || session == null) {
            return
        }

        val packet = interceptablePacket.packet
        val currentTime = System.currentTimeMillis()

        if (packet is DisconnectPacket && disconnectPacketValue) {
            handleDisconnectPacket(interceptablePacket, packet)
        }

        if (packet is TransferPacket && transferPacketValue) {
            handleTransferPacket(interceptablePacket, packet)
        }

        if (packet is PlayStatusPacket && playStatusPacketValue) {
            handlePlayStatusPacket(interceptablePacket, packet)
        }

        if (packet is NetworkSettingsPacket && networkSettingsPacketValue) {
            if (intelligentBypass) {
                if (showKickMessages) {
                    session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ß7–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                }
            }
        }

        if (antiAfkSimulation && packet is PlayerAuthInputPacket && session?.localPlayer != null && currentTime - lastMovementTime >= movementInterval) {
            performAntiAFKMovement()
            lastMovementTime = currentTime
        }
    }

    private fun handleDisconnectPacket(interceptablePacket: InterceptablePacket, packet: DisconnectPacket) {
        lastDisconnectReason = packet.kickMessage

        val reason = getReadableKickReason(packet.reason, packet.kickMessage)

        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–°–µ—Ä–≤–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∞—Å –æ—Ç–∫–ª—é—á–∏—Ç—å: ¬ßf$reason")
        }

        // *** –ò–°–ü–û–õ–¨–ó–£–ï–ú intercept() –í–ú–ï–°–¢–û –ü–†–Ø–ú–û–ô –ó–ê–ü–ò–°–ò ***
        interceptablePacket.intercept()

        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßa–û—Ç–∫–∞–∑—ã–≤–∞—é –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.")
        }

        if (autoReconnect) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            attemptReconnect()
        }
    }

    private fun handleTransferPacket(interceptablePacket: InterceptablePacket, packet: TransferPacket) {
        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–°–µ—Ä–≤–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–∞—Å –Ω–∞ –¥—Ä—É–≥–æ–π IP: ¬ßf${packet.address}:${packet.port}")
        }

        // *** –ò–°–ü–û–õ–¨–ó–£–ï–ú intercept() –í–ú–ï–°–¢–û –ü–†–Ø–ú–û–ô –ó–ê–ü–ò–°–ò ***
        interceptablePacket.intercept()

        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßa–û—Ç–∫–∞–∑—ã–≤–∞—é –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")
        }

        if (autoReconnect) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            attemptReconnect()
        }
    }

    private fun handlePlayStatusPacket(interceptablePacket: InterceptablePacket, packet: PlayStatusPacket) {
        val status = packet.status
        val isKickStatus = when (status) {
            PlayStatusPacket.Status.LOGIN_FAILED_CLIENT_OLD,
            PlayStatusPacket.Status.LOGIN_FAILED_SERVER_OLD,
            PlayStatusPacket.Status.LOGIN_FAILED_INVALID_TENANT,
            PlayStatusPacket.Status.LOGIN_FAILED_EDITION_MISMATCH_EDU_TO_VANILLA,
            PlayStatusPacket.Status.LOGIN_FAILED_EDITION_MISMATCH_VANILLA_TO_EDU,
            PlayStatusPacket.Status.FAILED_SERVER_FULL_SUB_CLIENT -> true
            else -> false
        }

        if (isKickStatus) {
            if (showKickMessages) {
                session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–°–µ—Ä–≤–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–∞—Å –ø–æ —Å—Ç–∞—Ç—É—Å—É: ¬ßf$status")
            }

            // *** –ò–°–ü–û–õ–¨–ó–£–ï–ú intercept() –í–ú–ï–°–¢–û –ü–†–Ø–ú–û–ô –ó–ê–ü–ò–°–ò ***
            interceptablePacket.intercept()

            if (showKickMessages) {
                session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßa–û—Ç–∫–∞–∑—ã–≤–∞—é –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É.")
            }

            if (autoReconnect) {
                session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                attemptReconnect()
            }
        }
    }

    @OptIn(DelicateCoroutinesApi::class)
    private fun performAntiAFKMovement() {
        if (isPerformingAntiAFK || session?.localPlayer == null) return

        isPerformingAntiAFK = true

        GlobalScope.launch {
            try {
                if (useRandomMovement) {
                    val dx = Random.nextFloat() * 0.05f - 0.025f
                    val dz = Random.nextFloat() * 0.05f - 0.025f
                    val motionPacket = SetEntityMotionPacket().apply {
                        runtimeEntityId = session!!.localPlayer.runtimeEntityId
                        motion = Vector3f.from(dx, 0f, dz)
                    }
                    session?.clientBound(motionPacket)
                } else {
                    val motionPacket = SetEntityMotionPacket().apply {
                        runtimeEntityId = session!!.localPlayer.runtimeEntityId
                        motion = Vector3f.from(0.01f, 0f, 0.01f)
                    }
                    session?.clientBound(motionPacket)
                }
                delay(movementDuration.toLong())
                val stopMotionPacket = SetEntityMotionPacket().apply {
                    runtimeEntityId = session!!.localPlayer.runtimeEntityId
                    motion = Vector3f.ZERO
                }
                session?.clientBound(stopMotionPacket)

                isPerformingAntiAFK = false
            } catch (e: Exception) {
                Log.e("AntiKick", "Error during anti-AFK movement", e)
                isPerformingAntiAFK = false
            }
        }
    }

    @OptIn(DelicateCoroutinesApi::class)
    private fun attemptReconnect() {
        if (reconnectAttempts >= maxReconnectAttempts) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßc–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (¬ßf$maxReconnectAttempts¬ßc).")
            return
        }

        reconnectAttempts++

        session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (¬ßf$reconnectAttempts¬ß7/¬ßf$maxReconnectAttempts¬ß7)...")

        GlobalScope.launch {
            delay(reconnectDelay.toLong())
            // *** –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. ***
            // session?.reconnect() // <-- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            //
            // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤–∞—à GameSession.
            // –ë–µ–∑ —ç—Ç–æ–≥–æ, –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.

            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßa–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å.")
        }
    }

    private fun getReadableKickReason(reason: DisconnectFailReason, message: String): String {
        return when (reason) {
            DisconnectFailReason.KICKED, DisconnectFailReason.KICKED_FOR_EXPLOIT, DisconnectFailReason.KICKED_FOR_IDLE ->
                if (message.isNotBlank()) "–≤—ã–±—Ä–æ—à–µ–Ω: $message" else "–≤—ã–±—Ä–æ—à–µ–Ω –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"
            DisconnectFailReason.TIMEOUT -> "—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ (—Ç–∞–π–º–∞—É—Ç)"
            DisconnectFailReason.SERVER_FULL -> "—Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω"
            DisconnectFailReason.NOT_ALLOWED -> "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
            DisconnectFailReason.BANNED_SKIN -> "–∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∫–∏–Ω"
            DisconnectFailReason.SHUTDOWN -> "—Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è"
            DisconnectFailReason.INVALID_PLAYER -> "–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞"
            else -> if (message.isNotBlank()) "–ø—Ä–∏—á–∏–Ω–∞ $reason: $message" else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: $reason"
        }
    }
}
