
package com.retrivedmods.wclient.game.module.misc

import android.util.Log
import com.retrivedmods.wclient.game.InterceptablePacket
import com.retrivedmods.wclient.game.Module
import com.retrivedmods.wclient.game.ModuleCategory
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import org.cloudburstmc.math.vector.Vector3f
import org.cloudburstmc.protocol.bedrock.packet.*
import kotlin.random.Random

class AntiKickModule : Module(
    name = "üõ°Ô∏è –ê–Ω—Ç–∏-–ö–∏–∫", // –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å —ç–º–æ–¥–∑–∏
    category = ModuleCategory.Misc
) {

    // –û–ø—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    private var disconnectPacketValue by boolValue("üîå –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", true)
    private var transferPacketValue by boolValue("üì° –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å", true)
    private var playStatusPacketValue by boolValue("üìä –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã", true)
    private var networkSettingsPacketValue by boolValue("‚öôÔ∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏", true)

    private var showKickMessages by boolValue("üí¨ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∏–∫–∞—Ö", true)
    private var intelligentBypass by boolValue("üß† –£–º–Ω—ã–π –æ–±—Ö–æ–¥", true)
    private var autoReconnect by boolValue("üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", false)
    
    // Anti-AFK —Ñ—É–Ω–∫—Ü–∏–∏
    private var preventTimeout by boolValue("‚è∞ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å —Ç–∞–π–º–∞—É—Ç", true)
    private var useRandomMovement by boolValue("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ", true)
    private var movementRadius by floatValue("üìè –†–∞–¥–∏—É—Å –¥–≤–∏–∂–µ–Ω–∏—è", 2.0f, 0.5f..10.0f)

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–±—ä—è–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    private var isPerformingAntiAFK: Boolean = false
    private var lastMovementTime: Long = 0L
    private var reconnectAttempts: Int = 0
    private var lastHeartbeatTime: Long = 0L
    private var maxReconnectAttempts: Int = 3
    private var reconnectDelay: Int = 5000
    private val heartbeatInterval = 30000L

    override fun onEnabled() {
        super.onEnabled()
        if (session != null) {
            lastMovementTime = System.currentTimeMillis()
            reconnectAttempts = 0
            lastHeartbeatTime = System.currentTimeMillis()

            if (preventTimeout) {
                startHeartbeatTask()
            }
        }
    }

    override fun onDisabled() {
        super.onDisabled()
        isPerformingAntiAFK = false
    }

    @OptIn(DelicateCoroutinesApi::class)
    private fun startHeartbeatTask() {
        GlobalScope.launch {
            while (isEnabled && session != null) {
                val currentTime = System.currentTimeMillis()
                if (currentTime - lastHeartbeatTime >= heartbeatInterval) {
                    try {
                        val textPacket = TextPacket().apply {
                            type = TextPacket.Type.TIP
                            isNeedsTranslation = false
                            message = ""
                            xuid = ""
                            platformChatId = ""
                        }
                        session?.clientBound(textPacket)
                        lastHeartbeatTime = currentTime
                    } catch (e: Exception) {
                        Log.w("AntiKick", "Failed to send heartbeat packet", e)
                    }
                }
                delay(5000)
            }
        }
    }

    override fun beforePacketBound(interceptablePacket: InterceptablePacket) {
        if (!isEnabled) return

        val packet = interceptablePacket.packet

        when (packet) {
            is DisconnectPacket -> {
                if (disconnectPacketValue) {
                    handleDisconnectPacket(interceptablePacket, packet)
                }
            }
            is TransferPacket -> {
                if (transferPacketValue) {
                    handleTransferPacket(interceptablePacket, packet)
                }
            }
            is PlayStatusPacket -> {
                if (playStatusPacketValue) {
                    handlePlayStatusPacket(interceptablePacket, packet)
                }
            }
            is NetworkSettingsPacket -> {
                if (networkSettingsPacketValue) {
                    handleNetworkSettingsPacket(interceptablePacket, packet)
                }
            }
            is PlayerAuthInputPacket -> {
                if (preventTimeout) {
                    lastMovementTime = System.currentTimeMillis()
                    
                    if (useRandomMovement && System.currentTimeMillis() - lastMovementTime > 30000) {
                        performAntiAFKMovement()
                    }
                }
            }
        }
    }

    private fun handleDisconnectPacket(interceptablePacket: InterceptablePacket, packet: DisconnectPacket) {
        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–°–µ—Ä–≤–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–∞—Å: ¬ßf${packet.kickMessage}")
        }

        interceptablePacket.intercept()

        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßa–û—Ç–∫–∞–∑—ã–≤–∞—é –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.")
        }

        if (autoReconnect) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            attemptReconnect()
        }
    }

    private fun handleTransferPacket(interceptablePacket: InterceptablePacket, packet: TransferPacket) {
        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–°–µ—Ä–≤–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–∞—Å: ¬ßf${packet.address}:${packet.port}")
        }

        interceptablePacket.intercept()

        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßa–û—Ç–∫–∞–∑—ã–≤–∞—é –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–Ω–æ—Å–∞.")
        }

        if (autoReconnect) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            attemptReconnect()
        }
    }

    private fun handleNetworkSettingsPacket(interceptablePacket: InterceptablePacket, packet: NetworkSettingsPacket) {
        if (intelligentBypass) {
            // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏
            val safeCompressionThreshold = 256
            if (packet.compressionThreshold <= safeCompressionThreshold) {
                return // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–∞–∫–µ—Ç
            }
        }

        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–°–µ—Ä–≤–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏.")
        }

        interceptablePacket.intercept()

        if (showKickMessages) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßa–û—Ç–∫–∞–∑—ã–≤–∞—é –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ç–∏.")
        }

        if (autoReconnect) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            attemptReconnect()
        }
    }

    private fun handlePlayStatusPacket(interceptablePacket: InterceptablePacket, packet: PlayStatusPacket) {
        val status = packet.status
        val isKickStatus = when (status) {
            PlayStatusPacket.Status.LOGIN_FAILED_CLIENT_OLD,
            PlayStatusPacket.Status.LOGIN_FAILED_SERVER_OLD,
            PlayStatusPacket.Status.LOGIN_FAILED_INVALID_TENANT,
            PlayStatusPacket.Status.LOGIN_FAILED_EDITION_MISMATCH_EDU_TO_VANILLA,
            PlayStatusPacket.Status.LOGIN_FAILED_EDITION_MISMATCH_VANILLA_TO_EDU,
            PlayStatusPacket.Status.FAILED_SERVER_FULL_SUB_CLIENT -> true
            else -> false
        }

        if (isKickStatus) {
            if (showKickMessages) {
                session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–°–µ—Ä–≤–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–∞—Å –ø–æ —Å—Ç–∞—Ç—É—Å—É: ¬ßf$status")
            }

            interceptablePacket.intercept()

            if (showKickMessages) {
                session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßa–û—Ç–∫–∞–∑—ã–≤–∞—é –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É.")
            }

            if (autoReconnect) {
                session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                attemptReconnect()
            }
        }
    }

    @OptIn(DelicateCoroutinesApi::class)
    private fun performAntiAFKMovement() {
        if (isPerformingAntiAFK || session?.localPlayer == null) return

        isPerformingAntiAFK = true

        GlobalScope.launch {
            try {
                if (useRandomMovement) {
                    val dx = Random.nextFloat() * 0.05f - 0.025f
                    val dz = Random.nextFloat() * 0.05f - 0.025f
                    val motionPacket = SetEntityMotionPacket().apply {
                        runtimeEntityId = session?.localPlayer?.runtimeEntityId ?: 0L
                        motion = Vector3f.from(dx, 0f, dz)
                    }
                    session?.clientBound(motionPacket)
                }
                delay(100)
            } catch (e: Exception) {
                Log.w("AntiKick", "Failed to perform anti-AFK movement", e)
            } finally {
                isPerformingAntiAFK = false
            }
        }
    }

    @OptIn(DelicateCoroutinesApi::class)
    private fun attemptReconnect() {
        if (reconnectAttempts >= maxReconnectAttempts) {
            session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßc–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ωuto.")
            return
        }

        reconnectAttempts++
        
        GlobalScope.launch {
            try {
                delay(reconnectDelay.toLong())
                session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ße–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #$reconnectAttempts...")
                
                // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßa–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
                
            } catch (e: Exception) {
                Log.w("AntiKick", "Failed to reconnect", e)
                session?.displayClientMessage("¬ß8[¬ßb–ê–Ω—Ç–∏–ö–∏–∫¬ß8] ¬ßc–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ${e.message}")
            }
        }
    }
}
